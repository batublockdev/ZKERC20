// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import {Test, console} from "forge-std/Test.sol";
import {ZKERC20} from "../src/ZKERC20.sol";
import {Groth16Verifier} from "../src/ZKPVerifier.sol";

contract MyGovernorTest is Test {
    ZKERC20 token;
    Groth16Verifier verifier;
    address public VOTER = makeAddr("voter");
    address public testAddress = 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC;
    address public testAddress2 = 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266;

    function setUp() public {
        verifier = new Groth16Verifier();
        token = new ZKERC20();
        console.log("ZKERC20 deployed at:", address(token));
        console.log("Groth16Verifier deployed at:", address(verifier));
    }

    function testmintErc20() public {
        uint256[8] memory proof = [
            2694672258025680421605230898141661532219350466564635120146005093122763531215,
            18326273385412289267015936633984419411223551309764895148683158943681707931665,
            20063073434682210250034658460400464167053750963390546981879530311080682343225,
            11188833637039866172953640285604971148874267737927229144442160149439745557479,
            11820224396699490860201814944821503350179421653070922831622067665232940295897,
            8143143435180397229510423112387045069271520076594939395184092020908912147733,
            10037868810521602106043653085515939283514200478946781511586463056873284609847,
            10372256292269583338923712231482664571796944806572274521034582231012235920
        ];
        uint256 balanceHashedMint = 8806289518166450089907228189602704644072002725474956267656323070018954065179;
        uint256 newBalanceHashMint = 18082788362835648878815536709532753574623289043174252909037674160673731835378;
        uint256 msgTransferMint = 9464843831001755312756042682631830876105286245727639697156996269567651464475;
        console.log("address: ", uint256(uint160(testAddress)));
        token.mint(
            testAddress,
            balanceHashedMint,
            newBalanceHashMint,
            proof,
            msgTransferMint
        );
        //// transfer

        uint256[8] memory proofSend = [
            21705532470061919699332997443707283971467521948410317923401404028729974560130,
            8286870605238861878582465664642160458374239687163113189447678265314547794771,
            2569642648836837553415233315245547092417485248062405483076897757919564454403,
            5209880985396185765707871266096782790802576940966161557218457722596079721919,
            11671011738179320986599923897037357988340717848200092517444545639734511952400,
            685144802698584589138440257278906762055199922240795169751122366669610104520,
            17217458894149904818051435494184899022304954272332688450939046812744749416538,
            11105882282964524620475116088568486417513384536625255003275713509703118957297
        ];
        uint256 newBalanceHashsend = 6987897394239090274910269385756678620248329921416197804959106701064773026619;
        uint256 msgTransfersend = 10202798785903603479714345686427437598275191696611944481764730683038843059302;
        console.log("address: ", uint256(uint160(testAddress2)));

        vm.prank(testAddress);
        token.sendTransfer(
            testAddress2,
            newBalanceHashsend,
            proofSend,
            msgTransfersend,
            "x"
        );
        /*assertEq(token.balanceOf(VOTER2), 1e18);
        assertEq(token.balanceOf(VOTER3), 1e18);*/
    }
}
